#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#Resize SD function is based on the corresponding function in raspi-config
#The overclocking function is copied from raspi-config
#raspi-config is created by Alex Bradbury <asb@asbradbury.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

savepackage() {
	PKGFILE=$2
	PKGPATH=$1
	TITLE=$3

	NAME=$(basename $PKGFILE);
	NAME=${NAME%.*}
	#LOCATION=$(dialog --backtitle "$BACKTITLE" --title "Config > $TITLE > Save" --ok-label Save --inputbox "Location:" 10 80 3>&1 1>&2 2>&3)
	filedirselect LOCATION "packages" "Settings > $TITLE > Save" "/home/xbian/" 0 0 " ";
	if [ $LOCATION != "" ]; then
		if [ -d $LOCATION ]; then
			tar -cf "$LOCATION/$NAME.tar" /tmp/xbiancache/* >/dev/nullf
			tar -rf "$LOCATION/$NAME.tar" $2 >/dev/null
			gzip "$LOCATION/$NAME.tar" >/dev/null
			dialog --backtitle "$BACKTITLE" --title "Config > $TITLE > Save" --msgbox "\n Package saved to:\n $LOCATION/$NAME.tar.gz" 8 44
			if [ $PACKAGELOCATION -eq 1 ]; then
				remotepackages;
			elif [ $PACKAGELOCATION -eq 2 ]; then
				packages;
			fi
		else
			dialog --backtitle "$BACKTITLE" --title "Config > $TITLE > Save" --ok-label Close --msgbox "\n\n\n This location doesn't exist" 8 44
			savepackage $1 $2 $3
		fi
		exit 0;
	fi
}

#Installs a set of packages
#$1 = Installation file
#$2 = Title of dialogs
installpackage() {
INSTALLS=$1;
TITLE=$2;
#Read package file
PACKAGESAPT=()
PACKAGESAPT=($(cat $INSTALLS | grep 'PackagesApt' | awk '{print substr($0,14,length+1)}'));
PACKAGESDIRECT=()
PACKAGESDIRECT=($(cat $INSTALLS | grep 'PackagesDirect' | awk '{print substr($0,17,length+1)}'));
POSTINSTALL=()
IFS=$'\n';
POSTINSTALL=($(cat $INSTALLS 2>&1 | \
while read X; do \
if [ $(($START)) -eq 1 ]; then awk '{print substr($0,2,length+1)}' <<< $X | sed 's/%PREFIX%/\/tmp\/xbiancache/g'; fi; \
if [[ "$X" == "#PostInstall" && $(($START)) -eq 0 ]]; then START=1; fi; \

done));
PREINSTALL=()
IFS=$'\n';
PREINSTALL=($(cat $INSTALLS 2>&1 | \
while read X; do \
if [[ "$X" == "#PostInstall" && $(($START)) -eq 1 ]]; then START=0; fi; \
if [ $(($START)) -eq 1 ]; then awk '{print substr($0,2,length+1)}' <<< $X | sed 's/%PREFIX%/\/tmp\/xbiancache/g'; fi; \
if [[ "$X" == "#PreInstall" && $(($START)) -eq 0 ]]; then START=1; fi; \
done));

#if PACKAGELOCATION
if [ $PACKAGELOCATION -eq 1 ]; then

dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n\n   Generating packages list..." 7 50
DEPENDENCIES=()
DEPENDENCIES+=($(apt-get -s install ${PACKAGESAPT[@]} 2>&1 | \
while read X; do \
grep 'Inst ' <<< $X | awk '{print $2}';\
done));

#Get all dependencies of a apt package
URLS=()
for PACKAGE in "${DEPENDENCIES[@]}"
do
URLS+=("http://archive.raspbian.org/raspbian/$(apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " ")");
done

#Add all custom linkx
for PACKAGE in "${PACKAGESDIRECT[@]}"
do
URLS+=("$PACKAGE");
done

#Get individual file sizes
NRFILE=0;
TOTALFILES=${#URLS[@]};
PKGSIZES=()
PKGSIZES=($(wget --spider ${URLS[@]} 2>&1 | \
while read X; do \
SIZE=$(grep -i 'length' <<< "$X" | awk '{print $2}' | sed 's:^.*[^0-9]\([0-9]*\)$:\1:');\
if [ ! -z $SIZE ]; then echo $SIZE; fi;\
done));

#Calculate total download size
TOTALSIZE=0;
for SIZE in ${PKGSIZES[@]}; do
	TOTALSIZE=$(($(($TOTALSIZE))+$(($SIZE))));
done

BYTESDOWNLOADED=0;
NRFILE=0;
TOTALPERCENT=0;
LIST="";
FIRSTFILE=0;

#Download package and create progress bar
wget -P /tmp/xbiancache/ --progress=bar:force ${URLS[@]} 2>&1 | \
while read -d "%" X; do \
FILE=$(echo "${URLS[$NRFILE]}" | awk -F/ '{print $NF}');\
PROGRESSBAR=$(grep -vi 'http' <<< "$X" | grep -vi 'length');\
BYTES=$(grep '\]' <<< $PROGRESSBAR | awk '{print $3}' | sed 's/,//g' | grep -iv 'K');\
PERCENT=$(grep -iv 'http' <<< $X | sed 's:^.*[^0-9]\([0-9]*\)$:\1:' | grep -iv 'K');\
if [ -z $PERCENT ]; then PERCENT=0; fi;\
if [ $(($PERCENT)) -eq 100 ]; then if [ $(($NRFILE+1)) -lt $TOTALFILES ]; then BYTESDOWNLOADED=$(($(($BYTESDOWNLOADED))+$((${PKGSIZES[$NRFILE]})))); TOTALPERCENT=$((($(($BYTESDOWNLOADED))*100)/$TOTALSIZE)); BYTES=0; NRFILE=$(($NRFILE+1)); FILE=$(echo "${URLS[$NRFILE]}" | awk -F/ '{print $NF}'); LIST="  Currently downloading:\n  $FILE ($(($NRFILE+1))/$TOTALFILES)"; PERCENT=0; else TOTALPERCENT=100; BYTES=0; BYTESDOWNLOADED=$TOTALSIZE; fi; else TOTALPERCENT=$(((($(($BYTESDOWNLOADED))+$(($BYTES)))*100)/$TOTALSIZE)); fi;\
if [[ $FIRSTFILE -eq 0 && $(($PERCENT)) -eq 0 ]]; then LIST="  Currently downloading:\n  $FILE ($(($NRFILE+1))/$TOTALFILES)"; FIRSTFILE=1; fi;\
cat <<EOF
XXX
$TOTALPERCENT
\n$LIST $PERCENT%\n\n\n  Total percentage done ($(($(($BYTESDOWNLOADED))+$(($BYTES))))/$TOTALSIZE):\n 
XXX
EOF
done | dialog --title "Config > $TITLE" --gauge "\n   Please wait..." 11 70 0;
sleep 2;
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n\n   All packages downloaded." 7 50
sleep 1;

#else PACKAGELOCATION
else

#Save depency order
DEPENDENCIES=($(ls -l /tmp/xbiancache/*.deb | awk '{print $9}' | awk '!/^[[:space:]]*$/'));

#fi PACKAGELOCATION
fi

#Install all apt packages
NRPACKAGES=${#DEPENDENCIES[@]};
CURRENTPACKAGE=1;

#Pre installation
NRSTEPS=${#PREINSTALL[@]};
CURRENTSTEP=1;
for STEP in "${PREINSTALL[@]}"
do
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n Pre installation ($CURRENTSTEP/$NRSTEPS):\n $STEP" 7 60
CURRENTSTEP=$(($CURRENTSTEP+1));
if [ $DEBUG -eq 0 ]; then
	eval "$STEP";
else
	sleep 1;
fi;
done

#Install apt packages
for PACKAGE in "${DEPENDENCIES[@]}"
do
FILE=$(basename $PACKAGE);
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n Installing package ($CURRENTPACKAGE/$NRPACKAGES):\n $FILE." 7 50
if [ $DEBUG -eq 0 ]; then
	dpkg -i "/tmp/xbiancache/"$(basename $(apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " ")) >/dev/null;
else
	sleep 1;
fi;
CURRENTPACKAGE=$(($CURRENTPACKAGE+1));
done

#Post installation
NRSTEPS=${#POSTINSTALL[@]};
CURRENTSTEP=1;
for STEP in "${POSTINSTALL[@]}"
do
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n Post installation ($CURRENTSTEP/$NRSTEPS):\n $STEP" 7 60
CURRENTSTEP=$(($CURRENTSTEP+1));
if [ $DEBUG -eq 0 ]; then
	eval "$STEP";
else
	sleep 1;
fi;
done

sleep 1;
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --msgbox "\n   Installation complete." 7 50
dialog --no-kill --backtitle "$BACKTITLE" --title "Config > $TITLE" --yesno "\n  Do you want to save package to you're local storage\n  so you don't have to download them again?" 8 60;
case "$?" in
	0) 
		savepackage "/tmp/xbiancache/" "$INSTALLS" "$TITLE"

		if [ $PACKAGELOCATION -eq 1 ]; then
			remotepackages;
		elif [ $PACKAGELOCATION -eq 2 ]; then
			packages;
		fi
	;;
	*)
		if [ $PACKAGELOCATION -eq 1 ]; then
			remotepackages;
		elif [ $PACKAGELOCATION -eq 2 ]; then
			packages;
		fi
	;;
esac
}

remotepackages() {
	PACKAGELOCATION=1;
	if [ ! -d "/tmp/xbianpackages" ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Packages" --infobox "\n\n   Downloading package list..." 7 50
		git clone -q --depth 5 https://github.com/Koenkk/packages.git /tmp/xbianpackages
		chmod +x /tmp/xbianpackages/*.sh
	fi
	
	PKGLIST=($(ls -l /tmp/xbianpackages | grep -iv 'README.md' | grep -iv 'COPYING' | awk '{print $9}' | awk '!/^[[:space:]]*$/'));
	LIST=();
	NRITEMS=0;
	for ITEM in ${PKGLIST[@]}
	do
		NRITEMS=$(($NRITEMS+1));
		DESC=$(cat /tmp/xbianpackages/$ITEM | grep "Description" | awk '{print substr($0,15,length)}');
		ITEM=$(sed 's/\<./\u&/g' <<< $ITEM | cut -f 1 -d.);
		if [ ${#ITEM} -gt 6 ]; then
			ITEM=$(echo -e "$ITEM\t- \"$DESC\"");
		else
			ITEM=$(echo -e "$ITEM\t\t- \"$DESC\"");
		fi
		LIST+=($NRITEMS "$ITEM");
	done
	RETURN=$(dialog --no-kill --backtitle "$BACKTITLE" --title 'Config > Packages' --no-collapse --ok-label Install --cancel-label Return --menu '' 11 80 ${NRITEMS} "${LIST[@]}" 3>&1 1>&2 2>&3);
	if [[ ! -z $RETURN && $RETURN -gt 0 ]]; then
		dialog --no-kill --backtitle "$BACKTITLE" --title 'Config > Packages' --yesno '\n  Are you sure you want to install this package?' 7 60;
		case "$?" in
			0) 
				RETURN=$(($RETURN-1));
				dialog --backtitle "$BACKTITLE" --title "Config > Packages" --msgbox "The installation can take a while depending on the number of packagesn being downloaded, the installation steps, you're internet connection speed, and any other programs that are running (e.g. XBMC). So please wait patiently..." 9 50
				installpackage "/tmp/xbianpackages/${PKGLIST[$RETURN]}" "Packages"
				packages;
			;;
			*)
				packages;
			;;
		esac
	else
		packages;
	fi
	exit 0;
}

localpackages() {
	PACKAGELOCATION=2;
	#LOCATION=$(dialog --backtitle "$BACKTITLE" --title "Config > Package" --ok-label Open --inputbox "Location:" 10 80 3>&1 1>&2 2>&3)
	filedirselect LOCATION "packages" "Settings > Packages" "/home/xbian/" 1 1 ".tar.gz";
	if [ ! -z $LOCATION ]; then
		if [ -f $LOCATION ]; then
			NAME=$(basename $LOCATION);
			NAME=${NAME%.tar.gz}
			INSTALLEXISTS=$(tar -ztf $LOCATION 2>/dev/null | grep "$NAME.sh" | wc -l);
			CACHEPATHEXISTS=$(tar -ztf $LOCATION 2>/dev/null | grep "tmp/xbiancache" | wc -l);
			PKGPATHEXISTS=$(tar -ztf $LOCATION 2>/dev/null | grep "tmp/xbianpackages" | wc -l);
			if [[ $INSTALLEXISTS -eq 1 && $CACHEPATHEXISTS -ge 1 && $PKGPATHEXISTS -eq 1 ]]; then
				tar -zxvf $LOCATION -C / >/dev/null;
				installpackage "/tmp/xbianpackages/$NAME.sh" "Packages"
			else
				dialog --backtitle "$BACKTITLE" --title "Config > Packages" --msgbox "\n  File is not a valid XBian script." 7 50
				localpackages
			fi
		else
			dialog --backtitle "$BACKTITLE" --title "Config > Packages" --msgbox "No package found at this location." 9 50
			localpackages
		fi
		packages
	fi
	packages
}
