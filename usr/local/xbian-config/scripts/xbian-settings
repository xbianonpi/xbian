#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#Resize SD function is based on the corresponding function in raspi-config
#The overclocking function is copied from raspi-config
#raspi-config is created by Alex Bradbury <asb@asbradbury.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

changesdsize() {
	showyesno	"Config > Settings > Resize SD" \
			"\n      Are you sure you want to resize you SD card?" 7 60;
	case "$?" in
		1)
			
			exit;
		;;
	esac

	SWAPSIZE=0;
	SWAPEXISTS=$(fdisk /dev/mmcblk0 -l | grep "swap" | awk '{print $1}' | awk '{print substr($0,length,length+1)}' | wc -l);
	PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 2 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
	CPART_START=$PART_START;
	CPART_END=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 3 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
	SDEND=$(parted /dev/mmcblk0 -ms unit s p | grep "/dev/" | cut -f 2 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
	SDEND=$(($SDEND-1));
	SDSIZE=$((($SDEND*512)/1024/1024));

	if [ $SWAPEXISTS -eq 1 ]; then
		swapoff -a
	fi
	
	if [ $SDSIZE -gt 4000 ]; then
		SWAPSIZE=$(((1000*1024*1024)/512));
	elif [ $SDSIZE -gt 2000 ]; then
		SWAPSIZE=$(((750*1024*1024)/512));
	else
		SWAPSIZE=$(((500*1024*1024)/512));
	fi

	PART_END=$(($SDEND-$SWAPSIZE));
	SWAP_START=$(($PART_END+1));
	SWAP_END=$(($SDEND));
	
	if [ $PART_END -gt $SWAP_START ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n      There is not enough space to create a swap partition. Aborting." 7 60
		
		exit 0;
	fi
		
	if [ $SWAPEXISTS -eq 1 ]; then
		CSWAP_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^3" | cut -f 2 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
		CSWAP_END=$(parted /dev/mmcblk0 -ms unit s p | grep "^3" | cut -f 3 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
		if [[ $PART_START -eq $CPART_START && $PART_END -eq $CPART_END && $SWAP_START -eq $CSWAP_START && $SWAP_END -eq $CSWAP_END ]]; then
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n      This SD card is already resized. Aborting." 7 60
			
			exit;
		fi
	fi
	
	if [ $DEBUG -eq 0 ]; then
		if [ $SWAPEXISTS -eq 1 ]; then
fdisk /dev/mmcblk0 <<EOF
p
d
2
p
d
3
n
p
2
$PART_START
$PART_END
n
p
3
$SWAP_START
$SWAP_END
t
3
82
p
w
EOF
		else
fdisk /dev/mmcblk0 <<EOF
p
d
2
n
p
2
$PART_START
$PART_END
n
p
3
$SWAP_START
$SWAP_END
t
3
82
p
w
EOF
		fi
	
	fi
	ASKFORREBOOT=1;
	FSEDIT=$(cat /etc/fstab | grep /dev/mmcblk0p3 | grep swap | wc -l);
	
	if [[ $FSEDIT -eq 0 && $DEBUG -eq 0 ]]; then
		echo "/dev/mmcblk0p3	swap	swap	defaults	0	0" >> /etc/fstab
	fi
	
  # now set up an init.d script
	if [ $DEBUG -eq 0 ]; then
cat <<\EOF > /etc/init.d/resize2fs_once
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/mmcblk0p2 &&
    mkswap /dev/mmcblk0p3 &&
    swapon /dev/mmcblk0p3 &&
    rm /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once remove &&
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
	chmod +x /etc/init.d/resize2fs_once >/dev/null;
	update-rc.d resize2fs_once defaults >/dev/null;
	fi
	dialog --backtitle "XBian" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n\n  Root partition has been resized. The\n  filesystem will be enlarged upon the\n  next reboot." 11 44
	
}

changetimezone() {
	if [ $(dpkg-query -W -f='${Status}\n' tzdata | grep 'not-installed' | wc -l) -eq 0 ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Set timezone" --infobox "\n\n  Please wait while 'tzdata' is loading..." 7 47
		dpkg-reconfigure tzdata
		showdialog 	"Config > Settings > Set timezone" \
				"Close" \
				"\n      Timezone succesfully changed" 9 42
	else
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Set timezone" --ok-label Close --msgbox "\n         TZData not installed" 7 44
	fi
	
}

changexbianpass() {
	PASS=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > Change password" --ok-label Change --insecure --passwordbox "Password:" 7 60 3>&1 1>&2 2>&3)
	if [ ! -z $PASS ]; then
		echo "xbian:$PASS" | chpasswd
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Change password" --ok-label Close --msgbox "\n      XBian password succesfully changed" 7 55
	fi
} 

changerootpass() {
	PASS=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > Change password" --ok-label Change --insecure --passwordbox "Password:" 7 60 3>&1 1>&2 2>&3)
	if [ ! -z $PASS ]; then
		echo "root:$PASS" | chpasswd
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Change password" --ok-label Close --msgbox "\n        Root password succesfully changed" 7 55
	fi
}

changesshroot() {
	if [ -z $(cat /etc/shadow | grep root | cut -f 2 -d:) ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n  User root has an empty password, without a\n  password user root cannot login through ssh\n  so please set this first." 9 51
		
	fi
	if [ $DISABLE_ROOTSSH -eq 0 ]; then
		sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config
		/etc/init.d/ssh restart >/dev/null
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n   SSH root login succesfully enabled" 7 44
	else
		sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
		/etc/init.d/ssh restart >/dev/null
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n  SSH root login succesfully disabled" 7 44
	fi
	
} 


changeoverclock() {
	dialog --backtitle "$BACKTITLE" --title "Config > Settings > Overclocking" --ok-label Close --msgbox "Be aware that overclocking may reduce the lifetime of your Raspberry Pi. If overclocking at a certain level causes system instability, try a more modest overclock. See http://elinux.org/RPi_Overclocking for more information." 9 65
	OVERCLOCK=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings > Overclocking' --ok-label Select --cancel-label Cancel --menu '' 11 80 5 1 "None     700MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt" 2 "Modest   800MHz ARM, 300MHz core, 400MHz SDRAM, 0 overvolt" 3 "XBian    840MHz ARM, 375MHz core, 400MHz SDRAM, 0 overvolt" 4 "Medium   900MHz ARM, 333MHz core, 450MHz SDRAM, 2 overvolt" 5 "High     950MHz ARM, 450MHz core, 450MHz SDRAM, 6 overvolt" 6 "Turbo    1000MHz ARM, 500MHz core, 500MHz SDRAM, 6 overvolt" 3>&1 1>&2 2>&3);
	case "$OVERCLOCK" in
		1)
			set_overclock None 700 250 400 0
		;;
		2)
			set_overclock Modest 800 300 400 0
		;;
		3)
			set_overclock XBian 840 375 400 0
		;;
		4)
			set_overclock Medium 900 333 450 2
		;;
		5)
			set_overclock High 950 450 450 6
		;;
		6)
			set_overclock Turbo 1000 500 500 6
		;;
		"")
			exit 0;
		;;
		*)
			settings
		;;
	esac
}

changelicensempg2() {
	SETTING=$(cat /boot/config.txt | grep 'decode_MPG2');
	CLICENSE=$(cat /boot/config.txt | grep 'decode_MPG2' | cut -f 2 -d=);
	if [ ! -z $SETTING ]; then
		BUTTON="Change";
		MESSAGE="changed";
	else
		BUTTON="Insert";
		MESSAGE="inserted";
	fi
	LICENSE=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > License MPG2" --ok-label $BUTTON --inputbox "License MPG2:" 7 80 $CLICENSE 3>&1 1>&2 2>&3)
	if [ ! -z $LICENSE ]; then
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING/decode_MPG2=$LICENSE/g' /boot/config.txt";
			eval $CHANGE;
		else
			echo "goed";
			echo "decode_MPG2=$LICENSE" >> /boot/config.txt
		fi
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > License MPG2" --ok-label Close --msgbox "\n        MPG2 license succesfully $MESSAGE" 7 55
	else
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING//g' /boot/config.txt";
			eval $CHANGE;
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > License MPG2" --ok-label Close --msgbox "\n        VC-1 license succesfully deleted" 7 55
		fi
	fi
	grep -v '^$' /boot/config.txt > /boot/config.new
	mv /boot/config.new /boot/config.txt
}

changelicensevc1() {
	SETTING=$(cat /boot/config.txt | grep 'decode_WVC1');
	CLICENSE=$(cat /boot/config.txt | grep 'decode_WVC1' | cut -f 2 -d=);
	if [ ! -z $SETTING ]; then
		BUTTON="Change";
		MESSAGE="changed";
	else
		BUTTON="Insert";
		MESSAGE="inserted";
	fi
	LICENSE=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > License VC-1" --ok-label $BUTTON --inputbox "License VC-1:" 7 80 $CLICENSE 3>&1 1>&2 2>&3)
	if [ ! -z $LICENSE ]; then
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING/decode_WVC1=$LICENSE/g' /boot/config.txt";
			eval $CHANGE;
		else
			echo "decode_WVC1=$LICENSE" >> /boot/config.txt
		fi
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > License VC-1" --ok-label Close --msgbox "\n        VC-1 license succesfully $MESSAGE" 7 55
	else
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING//g' /boot/config.txt";
			eval $CHANGE;
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > License VC-1" --ok-label Close --msgbox "\n        VC-1 license succesfully deleted" 7 55
		fi
	fi
	grep -v '^$' /boot/config.txt > /boot/config.new
	mv /boot/config.new /boot/config.txt
}

changehostname() {
	CHOSTNAME=$(cat /etc/hostname);
	HOSTNAME=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > Hostname" --ok-label Change --inputbox "Hostname:" 7 80 $CHOSTNAME 3>&1 1>&2 2>&3)
	if [ ! -z $HOSTNAME ]; then
		echo $HOSTNAME > /etc/hostname
		hostname $HOSTNAME
		eval "sed -i 's/$CHOSTNAME/$HOSTNAME/g' /etc/hosts";
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Hostname" --ok-label Close --msgbox "\n           Hostname succesfully changed" 7 55
		ASKFORREBOOT=1;
	fi
}

changelandhcp() {
	if [ $(cat /etc/network/interfaces | grep 'eth0 inet dhcp' | wc -l) -eq 0 ]; then
		cat /etc/network/interfaces | sed '/iface eth0 inet static/,+6d' | sed 's/iface lo inet loopback/iface lo inet loopback\niface eth0 inet dhcp\n/g' > /etc/network/interfaces.new
		mv /etc/network/interfaces.new /etc/network/interfaces
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --ok-label Close --msgbox "\n     LAN settings set to DHCP." 7 40
		
	else
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --ok-label Close --msgbox "\n    LAN settings already set to DHCP." 7 45
		
	fi
}

changelanstatic() {
	if [ ! -z "$1" ]; then
		CIP=();
		CSM=();
		CGW=();
		I=0;
		
		echo -e "$1" > /tmp/xbian-config-args
		
		while read LINE; do
			if [ $I -gt 7 ]; then
				CGW[$(($I-8))]=$LINE;
			elif [ $I -gt 3 ]; then
				CSM[$(($I-4))]=$LINE;
			else
				CIP[$I]=$LINE;
			fi
			I=$(($I+1));
		done < /tmp/xbian-config-args;
		rm /tmp/xbian-config-args;
	else
		CONTENT=$(cat /etc/network/interfaces | grep -A5 "^iface eth0 inet static");
		CIP=($(echo -e "$CONTENT" | grep address | cut -f 2 -d " " | sed 's/\./\ /g'));
		CSM=($(echo -e "$CONTENT" | grep netmask | cut -f 2 -d " " | sed 's/\./\ /g'));
		CGW=($(echo -e "$CONTENT" | grep gateway | cut -f 2 -d " " | sed 's/\./\ /g'));
	fi
	IP=();
	SM=();
	GW=();
	
	VALUES=$(dialog --ok-label "Change" --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --form "\n  Press up/down to move between fields" 14 45 0 \
		"Address:" 1 1 "${CIP[0]}" 1 15 4 3 \
			"." 1 19 "${CIP[1]}" 1 20 4 3 \
			"." 1 24 "${CIP[2]}" 1 25 4 3 \
			"." 1 29 "${CIP[3]}" 1 30 4 3 \
		"Subnet:" 3 1 "${CSM[0]}" 3 15 4 3 \
			"." 3 19 "${CSM[1]}" 3 20 4 3 \
			"." 3 24 "${CSM[2]}" 3 25 4 3 \
			"." 3 29 "${CSM[3]}" 3 30 4 3 \
		"Gateway:" 5 1 "${CGW[0]}" 5 15 4 3 \
			"." 5 19 "${CGW[1]}" 5 20 4 3 \
			"." 5 24 "${CGW[2]}" 5 25 4 3 \
			"." 5 29 "${CGW[3]}" 5 30 4 3 \
	3>&1 1>&2 2>&3);
	
	
	if [ $? -ge 1 ]; then
		
		exit 0
	fi
	
	I=0;

	echo -e "$VALUES" > /tmp/xbian-config-args
	
	while read LINE; do
		if [ $I -gt 7 ]; then
			GW[$(($I-8))]=$LINE;
		elif [ $I -gt 3 ]; then
			SM[$(($I-4))]=$LINE;
		else
			IP[$I]=$LINE;
		fi
		I=$(($I+1));
	done < /tmp/xbian-config-args;
	rm /tmp/xbian-config-args;
	
	if ! case "$(echo ${IP[@]} | sed 's/\ /\./g')" in
		*[!.0-9]* | *.*.*.*.* | *..* | [!0-9]* | *[!0-9] ) false ;;
		*25[6-9]* | *2[6-9][0-9]* | *[3-9][0-9][0-9]* | *[0-9][0-9][0-9][0-9]* ) false ;;
		[!1-9].*.*.* | *.*.*.[!1-9] ) false ;;
		*.*.*.* ) true ;;
		*) false ;;
	esac; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --ok-label Close --msgbox "\n      You didn't enter a valid ip address" 7 50
		changelanstatic "$VALUES";
		exit 0;
	fi
	
	if ! case "$(echo ${SM[@]} | sed 's/\ /\./g')" in
		255.0.0.0 | 255.255.0.0 | 255.255.255.0 | 255.255.255.255 ) true ;;
		*) false ;;
	esac; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --ok-label Close --msgbox "\n       You didn't enter a valid subnet" 7 50
		changelanstatic "$VALUES";
		exit 0;
	fi	
	
	if ! case "$(echo ${GW[@]} | sed 's/\ /\./g')" in
		*[!.0-9]* | *.*.*.*.* | *..* | [!0-9]* | *[!0-9] ) false ;;
		*25[6-9]* | *2[6-9][0-9]* | *[3-9][0-9][0-9]* | *[0-9][0-9][0-9][0-9]* ) false ;;
		[!1-9].*.*.* | *.*.*.[!1-9] ) false ;;
		*.*.*.* ) true ;;
		*) false ;;
	esac; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --ok-label Close --msgbox "\n       You didn't enter a valid gateway" 7 50
		changelanstatic "$VALUES";
		exit 0;
	fi
	
	CONFIG="iface eth0 inet static\naddress ";
	I=0;
	for VALUE in ${IP[@]}; do
		CONFIG+="$VALUE";
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\nnetwork ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${IP[@]}; do
		if [ $I -eq 3 ]; then
			CONFIG+=0;
		else
			CONFIG+=$VALUE;
		fi
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\nnetmask ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${SM[@]}; do
		CONFIG+=$VALUE;
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\nbroadcast ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${IP[@]}; do
		if [ $I -eq 3 ]; then
			CONFIG+=255;
		else
			CONFIG+=$VALUE;
		fi
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\ngateway ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${GW[@]}; do
		CONFIG+=$VALUE;
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		fi
		I=$(($I+1));
	done;
	if [ $(cat /etc/network/interfaces | grep 'eth0 inet dhcp' | wc -l) -eq 0 ]; then
		cat /etc/network/interfaces | sed '/iface eth0 inet static/,+6d' | sed 's/iface lo inet loopback/iface lo inet loopback\niface eth0 inet dhcp\n/g' > /etc/network/interfaces.new
		mv /etc/network/interfaces.new /etc/network/interfaces	
	fi
	if [ $(cat /etc/network/interfaces | grep 'eth0 inet dhcp' | wc -l) -gt 0 ]; then
		eval "sed -i 's/iface eth0 inet dhcp/$CONFIG/g' /etc/network/interfaces"
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure LAN" --ok-label Close --msgbox "\n     LAN static settings changed." 7 41
		
	fi
}	

changelan() {
	TYPE=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings > Configure LAN' --ok-label Select --cancel-label Return --menu '' 8 40 2 1 "DHCP" 2 "Fixed" 3>&1 1>&2 2>&3)
	case "$TYPE" in
		1)
			changelandhcp;
		;;
		2)
			changelanstatic;
		;;
		*)
			
		;;
	esac
}

changewlanunprotected() {
	SSID=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Change --inputbox "SSID:" 7 60 $2 3>&1 1>&2 2>&3)
	if [ $? -eq 0 ]; then
		if [ ! -z $SSID ]; then
			eval "$1=\"$SSID\""
		else
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n    Please enter you're network name" 7 45
			changewlanunprotected $1 $2;
		fi
	else
		changewlanunprotected $1 $2;
	fi
}

changewlanprotected() {
	VALUES=$(dialog --ok-label "Change" --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --form "\n  Press up/down to move between fields" 11 45 0 \
		"SSID:" 1 1 "$3" 1 15 21 20 \
		"Password:" 3 1 "$4" 3 15 21 20 \
	3>&1 1>&2 2>&3);
	if [ $? -ge 1 ]; then
		changewlanprotected $1 $2 $3 $4;
		exit 0
	fi
	
	echo -e "$VALUES" > /tmp/xbian-config-args
	
	if [ $(cat /tmp/xbian-config-args | wc -l) -lt 2 ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n    Please enter you're network name and password" 7 55
		changewlanprotected $1 $2 $3 $4
		exit 0
	fi
	
	I=0;
	while read LINE; do
	if [ $I -eq 0 ]; then
		SSID=$LINE;
	elif [ $I -eq 1 ]; then
		PASSWD=$LINE;
	fi
	I=$(($I+1));
	done < /tmp/xbian-config-args;
	rm /tmp/xbian-config-args;

	eval "$1=\"$SSID\"";
	eval "$2=\"$PASSWD\"";
}

changewlandhcp() {
	if [ $(cat /etc/wpa_supplicant/wpa_supplicant.conf | grep network | wc -l) -gt 0 ]; then
		CWLAN=$(cat /etc/wpa_supplicant/wpa_supplicant.conf | grep -A4 network);
		CSSID=$(echo -e "$CWLAN" | grep ssid | cut -f 2 -d= | sed -e 's/"//g');
		CPASSWD=$(echo -e "$CWLAN" | grep psk | cut -f 2 -d= | sed -e 's/"//g');
		if [ -z $CPASSWD ]; then
			CMODE=1;
		else
			CMODE=2;
		fi
	fi
	
	MODE=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings > Configure WLAN' --ok-label Select --cancel-label Return --menu '' 8 40 2 1 "Unprotected" 2 "WPA/WPA2 & WEP Security" 3>&1 1>&2 2>&3)
	case "$MODE" in
		1)
			changewlanunprotected SSID $CSSID;
		;;
		2)
			changewlanprotected SSID PASSWD $CSSID $CPASSWD;
		;;
		*)
			changewlanstatic
		;;
	esac	
	
	if [ $(cat /etc/wpa_supplicant/wpa_supplicant.conf | grep network | wc -l) -eq 0 ]; then
		if [ $MODE -eq 1 ]; then
			echo -e "\nnetwork={\nssid=\"$SSID\"\n}" >> /etc/wpa_supplicant/wpa_supplicant.conf
		else
			echo -e "\nnetwork={\nssid=\"$SSID\"\npsk=\"$PASSWD\"\n}" >> /etc/wpa_supplicant/wpa_supplicant.conf
		fi
	else
		if [ $MODE -eq 1 ]; then
			if [ $CMODE -eq 1 ]; then
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
			else
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
				eval "sed -i '/psk=\"$CPASSWD\"/d' /etc/wpa_supplicant/wpa_supplicant.conf"
			fi
		else
			if [ $CMODE -eq 2 ]; then
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
				eval "sed -i 's/psk=\"$CPASSWD\"/psk=\"$PASSWD\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
			else
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"\npsk=\"$PASSWD\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
			fi
		fi
	fi

	if [ $(cat /etc/network/interfaces | grep -A2 'wlan0 inet manual' | grep address | wc -l) -eq 1 ]; then
		cat /etc/network/interfaces | sed '/iface wlan0 inet manual/,+6d' | sed 's/allow-hotplug wlan0/allow-hotplug wlan0\niface wlan0 inet manual\nwpa-roam \/etc\/wpa_supplicant\/wpa_supplicant.conf/g' > /etc/network/interfaces.new
		mv /etc/network/interfaces.new /etc/network/interfaces			
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n     WLAN settings set to DHCP." 7 40
		
	else
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n    WLAN settings already set to DHCP." 7 45
		
	fi
}	


changewlanstatic() {
	if [ ! -z "$1" ]; then
		CIP=();
		CSM=();
		CGW=();
		I=0;
		
		echo -e "$1" > /tmp/xbian-config-args
		
		while read LINE; do
			if [ $I -gt 7 ]; then
				CGW[$(($I-8))]=$LINE;
			elif [ $I -gt 3 ]; then
				CSM[$(($I-4))]=$LINE;
			else
				CIP[$I]=$LINE;
			fi
			I=$(($I+1));
		done < /tmp/xbian-config-args;
		rm /tmp/xbian-config-args;
	else
		CONTENT=$(cat /etc/network/interfaces | grep -A6 "^iface wlan0 inet manual");
		CIP=($(echo -e "$CONTENT" | grep address | cut -f 2 -d " " | sed 's/\./\ /g'));
		CSM=($(echo -e "$CONTENT" | grep netmask | cut -f 2 -d " " | sed 's/\./\ /g'));
		CGW=($(echo -e "$CONTENT" | grep gateway | cut -f 2 -d " " | sed 's/\./\ /g'));
	fi
	IP=();
	SM=();
	GW=();
	
	if [ $(cat /etc/wpa_supplicant/wpa_supplicant.conf | grep network | wc -l) -gt 0 ]; then
		CWLAN=$(cat /etc/wpa_supplicant/wpa_supplicant.conf | grep -A4 network);
		CSSID=$(echo -e "$CWLAN" | grep ssid | cut -f 2 -d= | sed -e 's/"//g');
		CPASSWD=$(echo -e "$CWLAN" | grep psk | cut -f 2 -d= | sed -e 's/"//g');
		if [ -z $CPASSWD ]; then
			CMODE=1;
		else
			CMODE=2;
		fi
	fi
	
	MODE=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings > Configure WLAN' --ok-label Select --cancel-label Return --menu '' 8 40 2 1 "Unprotected" 2 "WPA/WPA2 & WEP Security" 3>&1 1>&2 2>&3)
	case "$MODE" in
		1)
			changewlanunprotected SSID $CSSID;
		;;
		2)
			changewlanprotected SSID PASSWD $CSSID $CPASSWD;
		;;
		*)
			changewlanstatic
		;;
	esac	
	
	VALUES=$(dialog --ok-label "Change" --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --form "\n  Press up/down to move between fields" 14 45 0 \
		"Address:" 1 1 "${CIP[0]}" 1 15 4 3 \
			"." 1 19 "${CIP[1]}" 1 20 4 3 \
			"." 1 24 "${CIP[2]}" 1 25 4 3 \
			"." 1 29 "${CIP[3]}" 1 30 4 3 \
		"Subnet:" 3 1 "${CSM[0]}" 3 15 4 3 \
			"." 3 19 "${CSM[1]}" 3 20 4 3 \
			"." 3 24 "${CSM[2]}" 3 25 4 3 \
			"." 3 29 "${CSM[3]}" 3 30 4 3 \
		"Gateway:" 5 1 "${CGW[0]}" 5 15 4 3 \
			"." 5 19 "${CGW[1]}" 5 20 4 3 \
			"." 5 24 "${CGW[2]}" 5 25 4 3 \
			"." 5 29 "${CGW[3]}" 5 30 4 3 \
	3>&1 1>&2 2>&3);
	
	
	if [ $? -ge 1 ]; then
		
		exit 0
	fi
	
	I=0;

	echo -e "$VALUES" > /tmp/xbian-config-args
	
	while read LINE; do
		if [ $I -gt 7 ]; then
			GW[$(($I-8))]=$LINE;
		elif [ $I -gt 3 ]; then
			SM[$(($I-4))]=$LINE;
		else
			IP[$I]=$LINE;
		fi
		I=$(($I+1));
	done < /tmp/xbian-config-args;
	rm /tmp/xbian-config-args;
	
	if ! case "$(echo ${IP[@]} | sed 's/\ /\./g')" in
		*[!.0-9]* | *.*.*.*.* | *..* | [!0-9]* | *[!0-9] ) false ;;
		*25[6-9]* | *2[6-9][0-9]* | *[3-9][0-9][0-9]* | *[0-9][0-9][0-9][0-9]* ) false ;;
		[!1-9].*.*.* | *.*.*.[!1-9] ) false ;;
		*.*.*.* ) true ;;
		*) false ;;
	esac; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n      You didn't enter a valid ip address" 7 50
		changelanstatic "$VALUES";
		exit 0;
	fi
	
	if ! case "$(echo ${SM[@]} | sed 's/\ /\./g')" in
		255.0.0.0 | 255.255.0.0 | 255.255.255.0 | 255.255.255.255 ) true ;;
		*) false ;;
	esac; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n       You didn't enter a valid subnet" 7 50
		changelanstatic "$VALUES";
		exit 0;
	fi	
	
	if ! case "$(echo ${GW[@]} | sed 's/\ /\./g')" in
		*[!.0-9]* | *.*.*.*.* | *..* | [!0-9]* | *[!0-9] ) false ;;
		*25[6-9]* | *2[6-9][0-9]* | *[3-9][0-9][0-9]* | *[0-9][0-9][0-9][0-9]* ) false ;;
		[!1-9].*.*.* | *.*.*.[!1-9] ) false ;;
		*.*.*.* ) true ;;
		*) false ;;
	esac; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n       You didn't enter a valid gateway" 7 50
		changelanstatic "$VALUES";
		exit 0;
	fi
	
	CONFIG="wpa-roam \/etc\/wpa_supplicant\/wpa_supplicant.conf\naddress ";
	I=0;
	for VALUE in ${IP[@]}; do
		CONFIG+="$VALUE";
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\nnetwork ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${IP[@]}; do
		if [ $I -eq 3 ]; then
			CONFIG+=0;
		else
			CONFIG+=$VALUE;
		fi
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\nnetmask ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${SM[@]}; do
		CONFIG+=$VALUE;
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\nbroadcast ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${IP[@]}; do
		if [ $I -eq 3 ]; then
			CONFIG+=255;
		else
			CONFIG+=$VALUE;
		fi
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		else
			CONFIG+="\ngateway ";
		fi
		I=$(($I+1));
	done;
	I=0;
	for VALUE in ${GW[@]}; do
		CONFIG+=$VALUE;
		if [ $I -lt 3 ]; then
			CONFIG+=".";
		fi
		I=$(($I+1));
	done;
	
	if [ $(cat /etc/wpa_supplicant/wpa_supplicant.conf | grep network | wc -l) -eq 0 ]; then
		if [ $MODE -eq 1 ]; then
			echo -e "\nnetwork={\nssid=\"$SSID\"\n}" >> /etc/wpa_supplicant/wpa_supplicant.conf
		else
			echo -e "\nnetwork={\nssid=\"$SSID\"\npsk=\"$PASSWD\"\n}" >> /etc/wpa_supplicant/wpa_supplicant.conf
		fi
	else
		if [ $MODE -eq 1 ]; then
			if [ $CMODE -eq 1 ]; then
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
			else
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
				eval "sed -i '/psk=\"$CPASSWD\"/d' /etc/wpa_supplicant/wpa_supplicant.conf"
			fi
		else
			if [ $CMODE -eq 2 ]; then
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
				eval "sed -i 's/psk=\"$CPASSWD\"/psk=\"$PASSWD\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
			else
				eval "sed -i 's/ssid=\"$CSSID\"/ssid=\"$SSID\"\npsk=\"$PASSWD\"/g' /etc/wpa_supplicant/wpa_supplicant.conf"
			fi
		fi
	fi
	if [ $(cat /etc/network/interfaces | grep -A2 'wlan0 inet manual' | grep address | wc -l) -gt 0 ]; then
		cat /etc/network/interfaces | sed '/iface wlan0 inet manual/,+6d' | sed 's/allow-hotplug wlan0/allow-hotplug wlan0\niface wlan0 inet manual\nwpa-roam \/etc\/wpa_supplicant\/wpa_supplicant.conf/g' > /etc/network/interfaces.new
		mv /etc/network/interfaces.new /etc/network/interfaces			
	fi		
	if [ $(cat /etc/network/interfaces | grep -A2 'wlan0 inet manual' | grep address | wc -l) -eq 0 ]; then
		eval "sed -i 's/wpa-roam \/etc\/wpa_supplicant\/wpa_supplicant.conf/$CONFIG/g' /etc/network/interfaces"
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Configure WLAN" --ok-label Close --msgbox "\n     WLAN static settings changed." 7 41
			
	fi
}

changewlan() {
	TYPE=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings > Configure WLAN' --ok-label Select --cancel-label Return --menu '' 8 40 2 1 "DHCP" 2 "Fixed" 3>&1 1>&2 2>&3)
	case "$TYPE" in
		1)
			changewlandhcp;
		;;
		2)
			changewlanstatic;
		;;
		*)
			
		;;
	esac
}

changeforcehdmi() {
	showyesno 	"Config > Settings > Force HDMI hotplug" \
			"\n  Enabling this option forces the pi to enable HDMI\n  at boot, even if no TV is connected. \n\n  Is this what you want?" 12 60
	case "$?" in
		0) 
			set_config_var force_hdmi_hotplug 1 /boot/config.txt >/dev/null
			showdialog 	"Config > Settings > Force HDMI hotplug" \
					"Close" \
					"\n   Force HDMI hotplug succesfully enabled" 7 55
		;;
		1)
			set_config_var force_hdmi_hotplug 0 /boot/config.txt >/dev/null
			showdialog 	"Config > Settings > Force HDMI hotplug" \
					"Close" \
					"\n   Force HDMI hotplug succesfully disabled" 7 55
		;;
	esac
	
}
