#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#Resize SD function is based on the corresponding function in raspi-config 
#The overclocking function is copied from raspi-config
#raspi-config is created by Alex Bradbury <asb@asbradbury.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>
#
#TODO: Check if packages are already installed

if [ ! $(id -u) -eq 0 ]; then
	echo "This program must be run as root.";
	exit 0;
fi	
	

#Enable CTRL-C, doesn't clear caches, doesn't install/executes anything
DEBUG=0;
BACKTITLE="XBian $(cat /etc/xbian_version)";
if [ $DEBUG -eq 0 ]; then
	trap '' 2
fi

DISABLE_ROOTSSH=0; 
ASKFORREBOOT=0;
PACKAGELOCATION=0;

if [ $(dpkg-query -W -f='${Status}\n' dialog | grep ' installed' | wc -l) -eq 0 ]; then
	echo "This program requires the dialog package: apt-get install dialog";
	exit 0;
fi

if [ $(dpkg-query -W -f='${Status}\n' screen | grep ' installed' | wc -l) -eq 0 ]; then
	echo "This program requires the screen package: apt-get install screen";
	exit 0;
fi

if [ $(dpkg-query -W -f='${Status}\n' git | grep ' installed' | wc -l) -eq 0 ]; then
	echo "This program requires the git package: apt-get install git";
	exit 0;
fi

if [ $(dpkg-query -W -f='${Status}\n' wget | grep ' installed' | wc -l) -eq 0 ]; then
	echo "This program requires the wget package: apt-get install wget";
	exit 0;
fi

#Select a file or directory
#$1 = Return value
#$2 = Previous menu
#$3 = Title
#$4 = Path
#$5 = Only files?
#$6 = Specific files?
#$7 = Only file extensions
filedirselect() {
	DELIMITER="%";
	IFS=$'\n'
	ITEMS=($(ls -AlQ $4 | grep ^d | grep -o "\(\".*\"\)"));
	if [ $5 -eq 1 ]; then
		if [ $6 -eq 1 ]; then
			MESSAGE="\nPlease select a *$7 file";
			ITEMS+=($(ls -AlQ $4 | grep -v ^d | awk '{print $9}' | grep -o "\(\".*\"\)" | grep $7));
		else
			MESSAGE="\nPlease select a file";
			ITEMS+=($(ls -AlQ $4 | grep -v ^d | awk '{print $9}' | grep -o "\(\".*\"\)"));
		fi
	else
		MESSAGE="\nPlease select a directory";
	fi
	if [ $(echo ${ITEMS[@]} | grep "$DELIMITER" | wc -l) -gt 0 ]; then
		DELIMITER='@';
	fi
	if [ $(echo ${ITEMS[@]} | grep "$DELIMITER" | wc -l) -gt 0 ]; then
		DELIMITER='^';
	fi
	
	if [ $4 != "/" ]; then
		LIST="0$DELIMITER[..]$DELIMITER";
		N=1;
	else
		LIST="";
		N=0;
	fi
	
	for ITEM in ${ITEMS[@]}
	do
		ITEM=$(echo $ITEM | sed -e 's/\ /\_/g' | sed -e 's/\"//g');
		if [ -d $4$ITEM ]; then
			LIST="$LIST$N$DELIMITER[$ITEM]$DELIMITER";
		else
			LIST="$LIST$N$DELIMITER$ITEM$DELIMITER";
		fi
		
		N=$(($N+1));
	done
	NRITEMS=${#ITEMS[@]};
	if [ $NRITEMS -lt 8 ]; then
		NRITEMS=8;
	fi
	LIST=$(echo \"$LIST\" | awk '{print substr($0,2,length-3)'} | sed -e 's/\_/\ /g');
	IFS="$DELIMITER";
	RETURN=$(dialog --no-kill --backtitle "$BACKTITLE" --title "Config > $3" --extra-button --extra-label Select --ok-label Open --cancel-label Return  --menu $MESSAGE 14 60 $NRITEMS $LIST  3>&1 1>&2 2>&3);
	BUTTON=$?;
	IFS=" ";
	case $BUTTON in
		1)
			eval $2;
		;;
		3)
			if [ $4 == "/" ]; then
				SELECTED=$(echo $4${ITEMS[$((RETURN))]} | sed 's/"//g');
			else
				SELECTED=$(echo $4${ITEMS[$((RETURN-1))]} | sed 's/"//g');
			fi
			if [[ $RETURN -gt 0 || $4 == "/" ]]; then
				if [[ $5 -eq 1 && -f $SELECTED ]] || [[ $5 -eq 0 && -d $SELECTED ]]; then
					eval "$1=\"$SELECTED\"";
				else
					if [ $4 == "/" ]; then
						SELECTED=$(echo $4${ITEMS[$((RETURN))]} | sed 's/"//g');
					else
						SELECTED=$(echo $4${ITEMS[$((RETURN-1))]} | sed 's/"//g');
					fi
					if [ -f "$SELECTED" ]; then
						eval "$1=\"$SELECTED\"";
					else
						filedirselect $1 $2 "$3" "$SELECTED/" $5 $6 $7;
					fi
				fi
			else
				LASTDIR=$(echo $4 | sed -e 's/\ /\_/g' | rev | cut -f2 -d "/" | rev);
				if [ -z $LASTDIR ]; then
					SELECTED="/";
				else
					SELECTED=$(eval "echo \"$4\" | sed -e 's/\ /\_/g' | sed -e 's/$LASTDIR\///g' | sed -e 's/\_/\ /g'");
				fi
				filedirselect $1 $2 "$3" "$SELECTED" $5 $6 $7;
			fi
		;;
		0)
		if [[ $RETURN -eq 0 && $4 != "/" ]]; then
			LASTDIR=$(echo $4 | sed -e 's/\ /\_/g' | rev | cut -f2 -d "/" | rev);
			if [ -z $LASTDIR ]; then
				SELECTED="/";
			else
				SELECTED=$(eval "echo \"$4\" | sed -e 's/\ /\_/g' | sed -e 's/$LASTDIR\///g' | sed -e 's/\_/\ /g'");
			fi
			filedirselect $1 $2 "$3" "$SELECTED" $5 $6 $7;
		else
			if [ $4 == "/" ]; then
				SELECTED=$(echo $4${ITEMS[$((RETURN))]} | sed 's/"//g');
			else
				SELECTED=$(echo $4${ITEMS[$((RETURN-1))]} | sed 's/"//g');
			fi
			if [ -f "$SELECTED" ]; then
				eval "$1=\"$SELECTED\"";
			else
				filedirselect $1 $2 "$3" "$SELECTED/" $5 $6 $7;
			fi
		fi
		;;
	esac;
}

check_rootssh_status() {
	if [ -f "/etc/ssh/sshd_config" ]; then
		STATUS=$(cat /etc/ssh/sshd_config | grep PermitRootLogin | grep "yes" | wc -l)
		if [ $STATUS -eq 1 ]; then
			DISABLE_ROOTSSH=1;
		else
			DISABLE_ROOTSSH=0;
		fi
	fi
} 

xbianinfo() {
    dialog --backtitle "$BACKTITLE" --title "XBian Config - Info" --msgbox "This tool provides a straight-forward way of doing initial configuration of XBian. Although it can be run at any time, some of the options may have difficulties if you have heavily customised your installation." 10 50
	mainmenu;
}

changesdsize() {
	dialog --no-kill --backtitle "$BACKTITLE" --title "Config > Settings > Resize SD" --yesno "\n      Are you sure you want to resize you SD card?" 7 60;
	case "$?" in
		1)
			settings;
			exit;
		;;
	esac

	SWAPSIZE=0;
	SWAPEXISTS=$(fdisk /dev/mmcblk0 -l | grep "swap" | awk '{print $1}' | awk '{print substr($0,length,length+1)}' | wc -l);
	PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 2 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
	CPART_START=$PART_START;
	CPART_END=$(parted /dev/mmcblk0 -ms unit s p | grep "^2" | cut -f 3 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
	SDEND=$(parted /dev/mmcblk0 -ms unit s p | grep "/dev/" | cut -f 2 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
	SDEND=$(($SDEND-1));
	SDSIZE=$((($SDEND*512)/1024/1024));

	if [ $SWAPEXISTS -eq 1 ]; then
		swapoff -a
	fi
	
	if [ $SDSIZE -gt 4000 ]; then
		SWAPSIZE=$(((1000*1024*1024)/512));
	elif [ $SDSIZE -gt 2000 ]; then
		SWAPSIZE=$(((750*1024*1024)/512));
	else
		SWAPSIZE=$(((500*1024*1024)/512));
	fi

	PART_END=$(($SDEND-$SWAPSIZE));
	SWAP_START=$(($PART_END+1));
	SWAP_END=$(($SDEND));
	
	if [ $PART_END -gt $SWAP_START ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n      There is not enough space to create a swap partition. Aborting." 7 60
		settings;
		exit 0;
	fi
		
	if [ $SWAPEXISTS -eq 1 ]; then
		CSWAP_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^3" | cut -f 2 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
		CSWAP_END=$(parted /dev/mmcblk0 -ms unit s p | grep "^3" | cut -f 3 -d: | awk '{print substr($0,0,length)}' | grep -o "[0-9]*");
		if [[ $PART_START -eq $CPART_START && $PART_END -eq $CPART_END && $SWAP_START -eq $CSWAP_START && $SWAP_END -eq $CSWAP_END ]]; then
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n      This SD card is already resized. Aborting." 7 60
			settings;
			exit;
		fi
	fi
	
	echo $PART_START;
	echo $SDEND;
	echo $SWAPSIZE;
	echo $PART_END;
	echo $SWAP_START;
	echo $SWAP_END;
	exit;
	if [ $DEBUG -eq 0 ]; then
		if [ $SWAPEXISTS -eq 1 ]; then
fdisk /dev/mmcblk0 <<EOF
p
d
2
p
d
3
n
p
2
$PART_START
$PART_END
n
p
3
$SWAP_START
$SWAP_END
t
3
82
p
w
EOF
		else
fdisk /dev/mmcblk0 <<EOF
p
d
2
n
p
2
$PART_START
$PART_END
n
p
3
$SWAP_START
$SWAP_END
t
3
82
p
w
EOF
		fi
	
	fi
	ASKFORREBOOT=1;
	FSEDIT=$(cat /etc/fstab | grep /dev/mmcblk0p3 | grep swap | wc -l);
	
	if [[ $FSEDIT -eq 0 && $DEBUG -eq 0 ]]; then
		echo "/dev/mmcblk0p3	swap	swap	defaults	0	0" >> /etc/fstab
	fi
	
  # now set up an init.d script
	if [ $DEBUG -eq 0 ]; then
cat <<\EOF > /etc/init.d/resize2fs_once
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/mmcblk0p2 &&
    mkswap /dev/mmcblk0p3 &&
    swapon /dev/mmcblk0p3 &&
    rm /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once remove &&
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
	chmod +x /etc/init.d/resize2fs_once >/dev/null;
	update-rc.d resize2fs_once defaults >/dev/null;
	fi
	dialog --backtitle "XBian" --title "Config > Settings > Resize SD" --ok-label Close --msgbox "\n\n  Root partition has been resized. The\n  filesystem will be enlarged upon the\n  next reboot." 11 44
	settings;
}

changetimezone() {
	if [ $(dpkg-query -W -f='${Status}\n' tzdata | grep 'not-installed' | wc -l) -eq 0 ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Set timezone" --infobox "\n\n  Please wait while 'tzdata' is loading..." 7 47
		dpkg-reconfigure tzdata
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Set timezone" --ok-label Close --msgbox "\n      Timezone succesfully changed" 7 44
	else
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Set timezone" --ok-label Close --msgbox "\n         TZData not installed" 7 44
	fi
	settings;
}

changexbianpass() {
	PASS=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > Change password" --ok-label Change --insecure --passwordbox "Password:" 7 80 3>&1 1>&2 2>&3)
	if [ ! -z $PASS ]; then
		echo "xbian:$PASS" | chpasswd
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Change password" --ok-label Close --msgbox "\n      XBian password succesfully changed" 7 55
	fi
	settings;
	exit 0
} 

changerootpass() {
	PASS=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Change --insecure --passwordbox "Password:" 7 80 3>&1 1>&2 2>&3)
	if [ ! -z $PASS ]; then
		echo "root:$PASS" | chpasswd
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n        Root password succesfully changed" 7 55
	fi
	settings;
	exit 0;
}

changesshroot() {
	if [ -z $(cat /etc/shadow | grep root | cut -f 2 -d:) ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n  User root has an empty password, without a\n  password user root cannot login through ssh\n  so please set this first." 9 51
		settings;
	fi
	if [ $DISABLE_ROOTSSH -eq 0 ]; then
		sed -i 's/PermitRootLogin no/PermitRootLogin yes/g' /etc/ssh/sshd_config
		/etc/init.d/ssh restart >/dev/null
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n   SSH root login succesfully enabled" 7 44
	else
		sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
		/etc/init.d/ssh restart >/dev/null
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > SSH root login" --ok-label Close --msgbox "\n  SSH root login succesfully disabled" 7 44
	fi
	settings;
} 

set_config_var() {
  lua - "$1" "$2" "$3" <<EOF > "$3.bak"
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
  if line:match("^#?%s*"..key.."=.*$") then
    line=key.."="..value
    made_change=true
  end
  print(line)
end

if not made_change then
  print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}

set_overclock() {
	if [ $DEBUG -eq 0 ]; then
    ASKFORREBOOT=1
	set_config_var arm_freq $2 /boot/config.txt >/dev/null
	set_config_var core_freq $3 /boot/config.txt >/dev/null
	set_config_var sdram_freq $4 /boot/config.txt >/dev/null 
	set_config_var over_voltage $5 /boot/config.txt >/dev/null
	fi
	dialog --backtitle "$BACKTITLE" --title "Config > Settings > Overclocking" --ok-label Close --msgbox "\n\n       Set overlock to preset '$1'" 9 50
	settings;
}

changeoverclock() {
	dialog --backtitle "$BACKTITLE" --title "Config > Settings > Overclocking" --ok-label Close --msgbox "Be aware that overclocking may reduce the lifetime of your Raspberry Pi. If overclocking at a certain level causes system instability, try a more modest overclock. See http://elinux.org/RPi_Overclocking for more information." 9 65
	OVERCLOCK=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings > Overclocking' --ok-label Select --cancel-label Cancel --menu '' 11 80 5 1 "None     700MHz ARM, 250MHz core, 400MHz SDRAM, 0 overvolt" 2 "Modest   800MHz ARM, 300MHz core, 400MHz SDRAM, 0 overvolt" 3 "XBian    840MHz ARM, 375MHz core, 400MHz SDRAM, 0 overvolt" 4 "Medium   900MHz ARM, 333MHz core, 450MHz SDRAM, 2 overvolt" 5 "High     950MHz ARM, 450MHz core, 450MHz SDRAM, 6 overvolt" 6 "Turbo    1000MHz ARM, 500MHz core, 500MHz SDRAM, 6 overvolt" 3>&1 1>&2 2>&3);
	case "$OVERCLOCK" in
		1)
			set_overclock None 700 250 400 0
		;;
		2)
			set_overclock Modest 800 300 400 0
		;;
		3)
			set_overclock XBian 840 375 400 0
		;;
		4)
			set_overclock Medium 900 333 450 2
		;;
		5)
			set_overclock High 950 450 450 6
		;;
		6)
			set_overclock Turbo 1000 500 500 6
		;;
		"")
			exit 0;
		;;
		*)
			settings
		;;
	esac
}

changelicensempg2() {
	SETTING=$(cat /boot/config.txt | grep 'decode_MPG2');
	CLICENSE=$(cat /boot/config.txt | grep 'decode_MPG2' | cut -f 2 -d=);
	if [ ! -z $SETTING ]; then
		BUTTON="Change";
		MESSAGE="changed";
	else
		BUTTON="Insert";
		MESSAGE="inserted";
	fi
	LICENSE=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > License MPG2" --ok-label $BUTTON --inputbox "License MPG2:" 7 80 $CLICENSE 3>&1 1>&2 2>&3)
	if [ ! -z $LICENSE ]; then
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING/decode_MPG2=$LICENSE/g' /boot/config.txt";
			eval $CHANGE;
		else
			echo "goed";
			echo "decode_MPG2=$LICENSE" >> /boot/config.txt
		fi
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > License MPG2" --ok-label Close --msgbox "\n        MPG2 license succesfully $MESSAGE" 7 55
	else
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING//g' /boot/config.txt";
			eval $CHANGE;
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > License MPG2" --ok-label Close --msgbox "\n        VC-1 license succesfully deleted" 7 55
		fi
	fi
	grep -v '^$' /boot/config.txt > /boot/config.new
	mv /boot/config.new /boot/config.txt
	settings;
	exit 0
}

changelicensevc1() {
	SETTING=$(cat /boot/config.txt | grep 'decode_WVC1');
	CLICENSE=$(cat /boot/config.txt | grep 'decode_WVC1' | cut -f 2 -d=);
	if [ ! -z $SETTING ]; then
		BUTTON="Change";
		MESSAGE="changed";
	else
		BUTTON="Insert";
		MESSAGE="inserted";
	fi
	LICENSE=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > License VC-1" --ok-label $BUTTON --inputbox "License VC-1:" 7 80 $CLICENSE 3>&1 1>&2 2>&3)
	if [ ! -z $LICENSE ]; then
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING/decode_WVC1=$LICENSE/g' /boot/config.txt";
			eval $CHANGE;
		else
			echo "decode_WVC1=$LICENSE" >> /boot/config.txt
		fi
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > License VC-1" --ok-label Close --msgbox "\n        VC-1 license succesfully $MESSAGE" 7 55
	else
		if [ ! -z $SETTING ]; then
			CHANGE="sed -i 's/$SETTING//g' /boot/config.txt";
			eval $CHANGE;
			dialog --backtitle "$BACKTITLE" --title "Config > Settings > License VC-1" --ok-label Close --msgbox "\n        VC-1 license succesfully deleted" 7 55
		fi
	fi
	grep -v '^$' /boot/config.txt > /boot/config.new
	mv /boot/config.new /boot/config.txt
	settings;
	exit 0
}

changehostname() {
	CHOSTNAME=$(cat /etc/hostname);
	HOSTNAME=$(dialog --backtitle "$BACKTITLE" --title "Config > Settings > Hostname" --ok-label Change --inputbox "Hostname:" 7 80 $CHOSTNAME 3>&1 1>&2 2>&3)
	if [ ! -z $HOSTNAME ]; then
		echo $HOSTNAME > /etc/hostname
		hostname $HOSTNAME
		eval "sed -i 's/$CHOSTNAME/$HOSTNAME/g' /etc/hosts";
		dialog --backtitle "$BACKTITLE" --title "Config > Settings > Hostname" --ok-label Close --msgbox "\n           Hostname succesfully changed" 7 55
		ASKFORREBOOT=1;
	fi
	settings;
	exit 0
}

settings() {
	check_rootssh_status
	ROOTSSHSTATUS="Enable";
    if [ $DISABLE_ROOTSSH -eq 1 ]; then
        ROOTSSHSTATUS="Disable"
    fi
	RETURN=$(dialog --backtitle "$BACKTITLE" --title 'Config > Settings' --ok-label Select --cancel-label Return --menu '' 11 80 7 1 "Resize SD       - \"Expand root partition to fill SD card\"" 2 "Change Password - \"Change password for 'xbian' user\"" 3 "Change Password - \"Change password for 'root' user\"" 4 "Set timezone    - \"Set the default timezone\"" 5 "SSH root login  - \"$ROOTSSHSTATUS SSH root login\"" 6 "Overclocking    - \"Configure overclocking\"" 7 "License MPG2    - \"Insert, update or delete MPG2 license\"" 8 "License VC-1    - \"Insert, update or delete VC-1 license\"" 9 "Hostname        - \"Change the default hostname\"" 3>&1 1>&2 2>&3)
	case "$RETURN" in
		1)
			changesdsize;
		;;
		2)
			changexbianpass;
		;;
		3)
			changerootpass;
		;;
		4)
			changetimezone
		;;
		5)
			changesshroot;
		;;
		6)
			changeoverclock;
		;;
		7)
			changelicensempg2
		;;
		8)
			changelicensevc1
		;;
		9)
			changehostname
		;;
		"")
			mainmenu;
		;;
        *)
			settings;
        ;;
    esac
    exit 0
}

notimplementedyet() {
	dialog --backtitle "$BACKTITLE" --title "Config > *" --ok-label Close --msgbox "\n\n             Not implemented yet" 9 50
	mainmenu;
}

savepackage() {
	PKGFILE=$2
	PKGPATH=$1
	TITLE=$3

	NAME=$(basename $PKGFILE);
	NAME=${NAME%.*}
	#LOCATION=$(dialog --backtitle "$BACKTITLE" --title "Config > $TITLE > Save" --ok-label Save --inputbox "Location:" 10 80 3>&1 1>&2 2>&3)
	filedirselect LOCATION "packages" "Settings > $TITLE > Save" "/home/xbian/" 0 0 " ";
	if [ $LOCATION != "" ]; then
		if [ -d $LOCATION ]; then
			tar -cf "$LOCATION/$NAME.tar" /tmp/xbiancache/* >/dev/nullf
			tar -rf "$LOCATION/$NAME.tar" $2 >/dev/null
			gzip "$LOCATION/$NAME.tar" >/dev/null
			dialog --backtitle "$BACKTITLE" --title "Config > $TITLE > Save" --msgbox "\n Package saved to:\n $LOCATION/$NAME.tar.gz" 8 44
			if [ $PACKAGELOCATION -eq 1 ]; then
				remotepackages;
			elif [ $PACKAGELOCATION -eq 2 ]; then
				packages;
			fi
		else
			dialog --backtitle "$BACKTITLE" --title "Config > $TITLE > Save" --ok-label Close --msgbox "\n\n\n This location doesn't exist" 8 44
			savepackage $1 $2 $3
		fi
		exit 0;
	fi
}

#Installs a set of packages
#$1 = Installation file
#$2 = Title of dialogs
installpackage() {
INSTALLS=$1;
TITLE=$2;
#Read package file
PACKAGESAPT=()
PACKAGESAPT=($(cat $INSTALLS | grep 'PackagesApt' | awk '{print substr($0,14,length+1)}'));
PACKAGESDIRECT=()
PACKAGESDIRECT=($(cat $INSTALLS | grep 'PackagesDirect' | awk '{print substr($0,17,length+1)}'));
POSTINSTALL=()
IFS=$'\n';
POSTINSTALL=($(cat $INSTALLS 2>&1 | \
while read X; do \
if [ $(($START)) -eq 1 ]; then awk '{print substr($0,2,length+1)}' <<< $X | sed 's/%PREFIX%/\/tmp\/xbiancache/g'; fi; \
if [[ "$X" == "#PostInstall" && $(($START)) -eq 0 ]]; then START=1; fi; \

done));
PREINSTALL=()
IFS=$'\n';
PREINSTALL=($(cat $INSTALLS 2>&1 | \
while read X; do \
if [[ "$X" == "#PostInstall" && $(($START)) -eq 1 ]]; then START=0; fi; \
if [ $(($START)) -eq 1 ]; then awk '{print substr($0,2,length+1)}' <<< $X | sed 's/%PREFIX%/\/tmp\/xbiancache/g'; fi; \
if [[ "$X" == "#PreInstall" && $(($START)) -eq 0 ]]; then START=1; fi; \
done));

#if PACKAGELOCATION
if [ $PACKAGELOCATION -eq 1 ]; then

dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n\n   Generating packages list..." 7 50
DEPENDENCIES=()
DEPENDENCIES+=($(apt-get -s install ${PACKAGESAPT[@]} 2>&1 | \
while read X; do \
grep 'Inst ' <<< $X | awk '{print $2}';\
done));

#Get all dependencies of a apt package
URLS=()
for PACKAGE in "${DEPENDENCIES[@]}"
do
URLS+=("http://archive.raspbian.org/raspbian/$(apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " ")");
done

#Add all custom linkx
for PACKAGE in "${PACKAGESDIRECT[@]}"
do
URLS+=("$PACKAGE");
done

#Get individual file sizes
NRFILE=0;
TOTALFILES=${#URLS[@]};
PKGSIZES=()
PKGSIZES=($(wget --spider ${URLS[@]} 2>&1 | \
while read X; do \
SIZE=$(grep -i 'length' <<< "$X" | awk '{print $2}' | sed 's:^.*[^0-9]\([0-9]*\)$:\1:');\
if [ ! -z $SIZE ]; then echo $SIZE; fi;\
done));

#Calculate total download size
TOTALSIZE=0;
for SIZE in ${PKGSIZES[@]}; do
	TOTALSIZE=$(($(($TOTALSIZE))+$(($SIZE))));
done

BYTESDOWNLOADED=0;
NRFILE=0;
TOTALPERCENT=0;
LIST="";
FIRSTFILE=0;

#Download package and create progress bar
wget -P /tmp/xbiancache/ --progress=bar:force ${URLS[@]} 2>&1 | \
while read -d "%" X; do \
FILE=$(echo "${URLS[$NRFILE]}" | awk -F/ '{print $NF}');\
PROGRESSBAR=$(grep -vi 'http' <<< "$X" | grep -vi 'length');\
BYTES=$(grep '\]' <<< $PROGRESSBAR | awk '{print $3}' | sed 's/,//g' | grep -iv 'K');\
PERCENT=$(grep -iv 'http' <<< $X | sed 's:^.*[^0-9]\([0-9]*\)$:\1:' | grep -iv 'K');\
if [ -z $PERCENT ]; then PERCENT=0; fi;\
if [ $(($PERCENT)) -eq 100 ]; then if [ $(($NRFILE+1)) -lt $TOTALFILES ]; then BYTESDOWNLOADED=$(($(($BYTESDOWNLOADED))+$((${PKGSIZES[$NRFILE]})))); TOTALPERCENT=$((($(($BYTESDOWNLOADED))*100)/$TOTALSIZE)); BYTES=0; NRFILE=$(($NRFILE+1)); FILE=$(echo "${URLS[$NRFILE]}" | awk -F/ '{print $NF}'); LIST="  Currently downloading:\n  $FILE ($(($NRFILE+1))/$TOTALFILES)"; PERCENT=0; else TOTALPERCENT=100; BYTES=0; BYTESDOWNLOADED=$TOTALSIZE; fi; else TOTALPERCENT=$(((($(($BYTESDOWNLOADED))+$(($BYTES)))*100)/$TOTALSIZE)); fi;\
if [[ $FIRSTFILE -eq 0 && $(($PERCENT)) -eq 0 ]]; then LIST="  Currently downloading:\n  $FILE ($(($NRFILE+1))/$TOTALFILES)"; FIRSTFILE=1; fi;\
cat <<EOF
XXX
$TOTALPERCENT
\n$LIST $PERCENT%\n\n\n  Total percentage done ($(($(($BYTESDOWNLOADED))+$(($BYTES))))/$TOTALSIZE):\n 
XXX
EOF
done | dialog --title "Config > $TITLE" --gauge "\n   Please wait..." 11 70 0;
sleep 2;
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n\n   All packages downloaded." 7 50
sleep 1;

#else PACKAGELOCATION
else

#Save depency order
DEPENDENCIES=($(ls -l /tmp/xbiancache/*.deb | awk '{print $9}' | awk '!/^[[:space:]]*$/'));

#fi PACKAGELOCATION
fi

#Install all apt packages
NRPACKAGES=${#DEPENDENCIES[@]};
CURRENTPACKAGE=1;

#Pre installation
NRSTEPS=${#PREINSTALL[@]};
CURRENTSTEP=1;
for STEP in "${PREINSTALL[@]}"
do
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n Pre installation ($CURRENTSTEP/$NRSTEPS):\n $STEP" 7 60
CURRENTSTEP=$(($CURRENTSTEP+1));
if [ $DEBUG -eq 0 ]; then
	eval "$STEP";
else
	sleep 1;
fi;
done

#Install apt packages
for PACKAGE in "${DEPENDENCIES[@]}"
do
FILE=$(basename $PACKAGE);
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n Installing package ($CURRENTPACKAGE/$NRPACKAGES):\n $FILE." 7 50
if [ $DEBUG -eq 0 ]; then
	dpkg -i "/tmp/xbiancache/"$(basename $(apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " ")) >/dev/null;
else
	sleep 1;
fi;
CURRENTPACKAGE=$(($CURRENTPACKAGE+1));
done

#Post installation
NRSTEPS=${#POSTINSTALL[@]};
CURRENTSTEP=1;
for STEP in "${POSTINSTALL[@]}"
do
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --infobox "\n Post installation ($CURRENTSTEP/$NRSTEPS):\n $STEP" 7 60
CURRENTSTEP=$(($CURRENTSTEP+1));
if [ $DEBUG -eq 0 ]; then
	eval "$STEP";
else
	sleep 1;
fi;
done

sleep 1;
dialog --backtitle "$BACKTITLE" --title "Config > $TITLE" --msgbox "\n   Installation complete." 7 50
dialog --no-kill --backtitle "$BACKTITLE" --title "Config > $TITLE" --yesno "\n  Do you want to save package to you're local storage\n  so you don't have to download them again?" 8 60;
case "$?" in
	0) 
		savepackage "/tmp/xbiancache/" "$INSTALLS" "$TITLE"
				
		if [ $PACKAGELOCATION -eq 1 ]; then
			remotepackages;
		elif [ $PACKAGELOCATION -eq 2 ]; then
			packages;
		fi
	;;
	*)
		if [ $PACKAGELOCATION -eq 1 ]; then
			remotepackages;
		elif [ $PACKAGELOCATION -eq 2 ]; then
			packages;
		fi
	;;
esac
}

remotepackages() {
	PACKAGELOCATION=1;
	if [ ! -d "/tmp/xbianpackages" ]; then
		dialog --backtitle "$BACKTITLE" --title "Config > Packages" --infobox "\n\n   Downloading package list..." 7 50
		git clone -q --depth 5 https://github.com/Koenkk/packages.git /tmp/xbianpackages
		chmod +x /tmp/xbianpackages/*.sh
	fi
	
	PKGLIST=($(ls -l /tmp/xbianpackages | grep -iv 'README.md' | awk '{print $9}' | awk '!/^[[:space:]]*$/'));
	LIST=();
	NRITEMS=0;
	for ITEM in ${PKGLIST[@]}
	do
		NRITEMS=$(($NRITEMS+1));
		DESC=$(cat /tmp/xbianpackages/$ITEM | grep "Description" | awk '{print substr($0,15,length)}');
		ITEM=$(sed 's/\<./\u&/g' <<< $ITEM | cut -f 1 -d.);
		if [ ${#ITEM} -gt 6 ]; then
			ITEM=$(echo -e "$ITEM\t- \"$DESC\"");
		else
			ITEM=$(echo -e "$ITEM\t\t- \"$DESC\"");
		fi
		LIST+=($NRITEMS "$ITEM");
	done
	RETURN=$(dialog --no-kill --backtitle "$BACKTITLE" --title 'Config > Packages' --no-collapse --ok-label Install --cancel-label Return --menu '' 11 80 ${NRITEMS} "${LIST[@]}" 3>&1 1>&2 2>&3);
	if [[ ! -z $RETURN && $RETURN -gt 0 ]]; then
		dialog --no-kill --backtitle "$BACKTITLE" --title 'Config > Packages' --yesno '\n  Are you sure you want to install this package?' 7 60;
		case "$?" in
			0) 
				RETURN=$(($RETURN-1));
				dialog --backtitle "$BACKTITLE" --title "Config > Packages" --msgbox "The installation can take a while depending on the number of packagesn being downloaded, the installation steps, you're internet connection speed, and any other programs that are running (e.g. XBMC). So please wait patiently..." 9 50
				installpackage "/tmp/xbianpackages/${PKGLIST[$RETURN]}" "Packages"
				packages;
			;;
			*)
				packages;
			;;
		esac
	else
		packages;
	fi
	exit 0;
}

localpackages() {
	PACKAGELOCATION=2;
	#LOCATION=$(dialog --backtitle "$BACKTITLE" --title "Config > Package" --ok-label Open --inputbox "Location:" 10 80 3>&1 1>&2 2>&3)
	filedirselect LOCATION "packages" "Settings > Packages" "/home/xbian/" 1 1 ".tar.gz";
	if [ ! -z $LOCATION ]; then
		if [ -f $LOCATION ]; then
			NAME=$(basename $LOCATION);
			NAME=${NAME%.tar.gz}
			INSTALLEXISTS=$(tar -ztf $LOCATION 2>/dev/null | grep "$NAME.sh" | wc -l);
			CACHEPATHEXISTS=$(tar -ztf $LOCATION 2>/dev/null | grep "tmp/xbiancache" | wc -l);
			PKGPATHEXISTS=$(tar -ztf $LOCATION 2>/dev/null | grep "tmp/xbianpackages" | wc -l);
			if [[ $INSTALLEXISTS -eq 1 && $CACHEPATHEXISTS -ge 1 && $PKGPATHEXISTS -eq 1 ]]; then
				tar -zxvf $LOCATION -C / >/dev/null;
				installpackage "/tmp/xbianpackages/$NAME.sh" "Packages"
			else
				dialog --backtitle "$BACKTITLE" --title "Config > Packages" --msgbox "\n  File is not a valid XBian script." 7 50
				localpackages
			fi
		else
			dialog --backtitle "$BACKTITLE" --title "Config > Packages" --msgbox "No package found at this location." 9 50
			localpackages
		fi
		packages
	fi
	packages
}

packages() {
	RETURN=$(dialog --no-kill --backtitle "$BACKTITLE" --title 'Config > Packages' --ok-label Select --cancel-label Return  --menu '' 9 80 5 1 "Remote - \"Install packages from internet\"" 2 "Local  - \"Install package from *.tar.gz\"" 3>&1 1>&2 2>&3)
	case "$RETURN" in
		1)
			remotepackages;
		;;
		2)
			localpackages;
		;;
		"")
			mainmenu
		;;
		*)
			mainmenu
		;;
	esac
}

mainmenu() {
	RETURN=$(dialog --no-kill --backtitle "$BACKTITLE" --title 'Config' --ok-label Select --cancel-label Exit  --menu '' 10 80 5 1 "Info     - \"Information about this tool\"" 2 "Settings - \"Change various system settings\"" 3 "Packages - \"Install or remove packages\"" 4 "Update   - \"Check for XBian Updates\"" 3>&1 1>&2 2>&3)

    case "$RETURN" in
		1)
			xbianinfo;
	    ;;
		2)
			settings;
		;;
		3)
			packages;
		;;
		4)
			notimplementedyet;
		;;
		"")
			if [ $ASKFORREBOOT -eq 1 ]; then
				dialog --backtitle "$BACKTITLE" --title "Reboot?" --ok-label Reboot --cancel-label Exit --yesno "\n\n  A reboot is required. Do you want to reboot now?" 9 55;

				case "$?" in
					0)
						if [ $DEBUG -eq 0 ]; then
							rm -rf /tmp/xbianpackages
							rm -rf /tmp/xbiancache
						fi
						echo 1 | sudo tee /proc/sys/vm/drop_caches
						reboot;
					;;
					1)
						if [ $DEBUG -eq 0 ]; then
							rm -rf /tmp/xbianpackages
							rm -rf /tmp/xbiancache
						fi
						echo 1 | sudo tee /proc/sys/vm/drop_caches
						exit 0
					;;
				esac
			else
				if [ $DEBUG -eq 0 ]; then
					rm -rf /tmp/xbianpackages
					rm -rf /tmp/xbiancache
				fi
				echo 1 | sudo tee /proc/sys/vm/drop_caches
				exit 0
			fi
		;;
		*)
			mainmenu
	    ;;
    esac
    exit 0
}
#Run script inside screen, so it's doesn't fill the whole terminal history
SCREEN=$(screen -r | grep "Attached" | wc -l);
if [ $SCREEN -eq 0 ]; then
	`screen $0`
else
	mainmenu;
fi
