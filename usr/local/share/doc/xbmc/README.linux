
TOC
1. Introduction
2. Getting the source code
3. Installing the required libraries and headers
4. How to compile
5. How to run
6. Uninstalling

-----------------------------------------------------------------------------
1. Introduction
-----------------------------------------------------------------------------

A gfx-adapter with OpenGL acceleration is highly recommended and 24/32 bitdepth
is required with OpenGL.

NOTE TO NEW LINUX USERS: All lines that are prefixed with the '$'
character are commands that need to be typed into a terminal window /
console (similar to the command prompt for Windows). Note that the '$'
character itself should NOT be typed as part of the command.


-----------------------------------------------------------------------------
2. Getting the source code
-----------------------------------------------------------------------------

You will have to grab the source code of course. First install the git
package provided by your distribution. Then from a terminal, type:

   $ cd $HOME
   $ git clone git://github.com/xbmc/xbmc.git xbmc

-----------------------------------------------------------------------------
3. Installing the required libraries and headers
-----------------------------------------------------------------------------

You will then need the required libraries. The following is the list of packages
that are used to build XBMC packages on Debian/Ubuntu (with all supported
external libraries enabled).

Build-Depends: autoconf, automake, autopoint, autotools-dev, cmake, curl,
  debhelper (>= 7.0.50~), gawk, gperf, libao-dev, libasound2-dev,
  libass-dev (>= 0.9.8), libavahi-client-dev, libavahi-common-dev,
  libavcodec-dev, libavfilter-dev, libavformat-dev, libavutil-dev,
  libbluetooth-dev, libbluray-dev, libboost-dev, libboost-thread-dev,
  libiso9660-dev, libbz2-dev, libcdio-dev, libcec-dev, libcrystalhd-dev, 
  libcurl4-gnutls-dev | libcurl-dev, libcwiid1-dev, libdbus-1-dev,
  libenca-dev, libflac-dev, libfontconfig-dev, libfreetype6-dev,
  libfribidi-dev, libgl1-mesa-dev | libgl-dev, libglew-dev,
  libglu1-mesa-dev | libglu-dev, libhal-dev, libhal-storage-dev,
  libjasper-dev, libjpeg-dev, libltdl-dev, liblzo2-dev, libmad0-dev,
  libmicrohttpd-dev, libmodplug-dev, libmpcdec-dev, libmpeg2-4-dev,
  libmysqlclient-dev, libnfs-dev, libogg-dev, libpcre3-dev, libplist-dev,
  libpng12-dev | libpng-dev, libpostproc-dev, libpulse-dev, librtmp-dev,
  libsamplerate-dev, libsdl-dev, libsdl-image1.2-dev, libsdl-mixer1.2-dev,
  libshairport-dev, libsmbclient-dev, libsqlite3-dev, libssh-dev, libssl-dev,
  libswscale-dev, libtinyxml-dev, libtool, libudev-dev, libusb-dev, libva-dev,
  libvdpau-dev, libvorbis-dev, libxinerama-dev, libxmu-dev, libxrandr-dev,
  libxt-dev, libyajl-dev, lsb-release, nasm [!amd64], python-dev,
  python-support, unzip, yasm, zip, zlib1g-dev, libcap-dev, swig, taglib(>= 1.8),
  default-jre

*** For developers and anyone else who compiles frequently it is recommended to
use ccache

--------------------------------------------------------------
3.1. Using the XBMC PPA to get all build dependencies (Debian/Ubuntu only)
--------------------------------------------------------------

For this, you need to specify the PPA in your apt sources. Please find them on
the forum.

http://forum.xbmc.org/showthread.php?t=33327

Update apt:
   $ sudo apt-get update

Here is the magic command to get the build dependencies (used to compile the
version on the PPA).
   $ sudo apt-get build-dep xbmc

-----------------------------------------------------------------------------
4. How to compile
-----------------------------------------------------------------------------

To create the XBMC executable manually perform these steps:

.0  $ ./bootstrap

.1  $ ./configure <option1> <option2> ... (See --help for available options)

A full listing of supported options can be viewed by typing
'./configure --help'.

.2  $ make

Tip: by adding -j<number> to the make command, you describe how many
     concurrent jobs will be used. So for dualcore the command is: 

    $ make -j2

.3  $ make -C lib/addons/script.module.pil

.4  $ make install

This will install XBMC in the prefix provided in 4.1 as well as a launcher script.

NOTE: You may need to run this with sudo (sudo make install) if your user
doesn't have write permissions to the prefix you have provided (as in the
default case, /usr/local).

Tip: To override the location that XBMC is installed, use PREFIX=<path>.
For example.

    $ make install DESTDIR=$HOME/xbmc

-----------------------------------------------------------------------------
4.1. Test Suite
-----------------------------------------------------------------------------
XBMC has a test suite which uses the Google C++ Testing Framework. The
framework is provided directly in XBMC's source tree and has very little
requirements in order to build and run. See the README file for the framework
at 'lib/gtest/README' for specific requirements.

To compile and run XBMC's test suite, the configure option '--enable-gtest'
has to be explicitely set during the configure stage. Once configured, to
build the testsuite, type the following.

    $ make check

To compile the test suite without running it, type the following.

    $ make testsuite

The test suite program can be run manually as well. The name of the test suite
program is 'xbmc-test' and will build in the XBMC source tree. To bring up the
'help' notes for the program, type the following.

    $ ./xbmc-test --gtest_help

The most useful options are,

  --gtest_list_tests
      List the names of all tests instead of running them. The name of
      TEST(Foo, Bar) is "Foo.Bar".
  --gtest_filter=POSTIVE_PATTERNS[-NEGATIVE_PATTERNS]
      Run only the tests whose name matches one of the positive patterns but
      none of the negative patterns. '?' matches any single character; '*'
      matches any substring; ':' separates two patterns.

NOTE: If the '--enable-gtest' option is not set during the configure
stage, the make targets 'check,' 'testsuite,' and 'testframework' will
simply show a message saying the framework has not been configured, and then
silently succeed (i.e. it will not return an error).

-----------------------------------------------------------------------------
5. How to run
-----------------------------------------------------------------------------
How to run xbmc depends on the type of installation you have done. It is
possible to run XBMC without the requirement to install xbmc anywhere else. In
this case, type the following from the top source directory.

    $ ./xbmc.bin

If you chose to install XBMC using '/usr' or '/usr/local' as the PREFIX, you
can just issue 'xbmc' in a teminal session.

If you overridden PREFIX to install XBMC into some non-standard location, you
will have to run xbmc by directly running 'xbmc.bin'. For example.

    $ $HOME/xbmc/usr/share/xbmc.bin

If you wish to use VDPAU decoding you will now have to change the Render Method
in Settings->Videos->Player from "Auto Detect" to "VDPAU".

-----------------------------------------------------------------------------
6. Uninstalling
-----------------------------------------------------------------------------
Issue "make uninstall"  ("sudo make uninstall" if you user doesn't have write
permission to the install directory) from your source tree. If you would like
to also remove any settings and 3rd party addons (skins, scripts, etc) you
should also run "rm -rf ~/.xbmc".

NOTE: If you have rerun configure with a different prefix, you will either need
to rerun configure with the correct prefix for this step to work correctly.

EOF

